import math
# Function to print the board
def print_board(board):
    for row in range(3):
        print(' | '.join(board[row * 3:(row + 1) * 3]))
        if row < 2:
            print('-' * 5)
# Check if the game has ended (win or draw)
def check_winner(board):
    # Check rows, columns, and diagonals for a winner
    for i in range(3):
        if board[i * 3] == board[i * 3 + 1] == board[i * 3 + 2] != ' ':
            return board[i * 3]
        if board[i] == board[i + 3] == board[i + 6] != ' ':
            return board[i]    
    if board[0] == board[4] == board[8] != ' ':
        return board[0]
    if board[2] == board[4] == board[6] != ' ':
        return board[2]
    return None  # No winner
# Check if the game is a draw
def is_draw(board):
    return ' ' not in board
# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, isMaximizing, alpha, beta):
    winner = check_winner(board)
    if winner == 'O':
        return 1
    elif winner == 'X':
        return -1
    elif is_draw(board):
        return 0
    if isMaximizing:  # AI's turn (playing 'O')
        best = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                best = max(best, minimax(board, depth + 1, False, alpha, beta))
                board[i] = ' '
                alpha = max(alpha, best)
                if beta <= alpha:
                    break  # Beta cut-off
        return best
    else:  # Human's turn (playing 'X')
        best = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                best = min(best, minimax(board, depth + 1, True, alpha, beta))
                board[i] = ' '
                beta = min(beta, best)
                if beta <= alpha:
                    break  # Alpha cut-off
        return best
# Function for AI to make a move
def ai_move(board):
    best_score = -math.inf
    best_move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False, -math.inf, math.inf)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move
# Function for the human player to make a move
def human_move(board):
    while True:
        try:
            move = int(input("Enter your move (1-9): ")) - 1
            if 0 <= move <= 8 and board[move] == ' ':
                return move
            else:
                print("Invalid move. Try again.")
        except ValueError:
            print("Please enter a valid number between 1 and 9.")
# Main game loop
def play_game():
    board = [' ' for _ in range(9)]  # Initialize an empty board
    while True:
        print_board(board)        
        # Check for win or draw
        winner = check_winner(board)
        if winner:
            print_board(board)
            print(f"{winner} wins!")
            break
        elif is_draw(board):
            print_board(board)
            print("It's a draw!")
            break        
        # Human's turn
        move = human_move(board)
        board[move] = 'X'        
        # Check for win or draw after human's move
        winner = check_winner(board)
        if winner:
            print_board(board)
            print(f"{winner} wins!")
            break
        elif is_draw(board):
            print_board(board)
            print("It's a draw!")
            break
        # AI's turn
        print("AI's turn...")
        move = ai_move(board)
        board[move] = 'O'
        # Check for win or draw after AI's move
        winner = check_winner(board)
        if winner:
            print_board(board)
            print(f"{winner} wins!")
            break
        elif is_draw(board):
            print_board(board)
            print("It's a draw!")
            break
# Start the game
play_game()
